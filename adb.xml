<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, January 02, 2023, 4:38 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "adb" generated by Plugin Wizard -->

<muclient>
<plugin
   name="adb"
   author="Athlau"
   id="cf78ba52f9bbad41f7e6b2e8"
   language="Lua"
   purpose="eq db of some sort"
   save_state="y"
   date_written="2023-01-02 16:37:58"
   requires="5.07"
   version="1.011"
   >
<description trim="y">
<![CDATA[
@R---------------- ADB plugin loaded ----------------------------------------------
@CThis is still early version and lots of things are in my todo list, including
@Cadding more help details and examples.
@wBla bla bla, add more text here

@RDon't shoot yourself in the leg. Format settings checks aren't there yet.@w
@R!DISABLE THIS IN EPICS!@w

@R    It's required to enable server side invmon for this plugin to work!
@w    Execute the following command to enable it:
      @Winvmon
      @wYou will now see inventory update tags.
@w    Note: if you're using plugins like dinv then it's already enabled.
@w    PS. I'm too lazy to write code which enables it :P

@MAvailable commands
@Wadb help@w - shows this help message

@Waid <item> [worn] [channel] [format.name]@w
 This command will identify given <item> and report output locally or to a
 specified channel.
 Examples:
 @Waid 2685807183@w  - will identify item and output results locally using 
                   format specified in @Gidentify_format@w
 @Waid something format.full@w  - will identify item and output results locally
                              using format.full settings
 @Waid sword gtell@w - will identify item and output result to group channel
                   using format specified in identify_channel_format
 @Waid sword worn t Sletch format.full@w - spam Sletch with full details :P

@Wadb options [edit|reset|set <group> <option> [value]]@w
 This command shows or changes ADB options.
 Examples:
 @Wadb options@w - show current options
 @Wadb options edit@w - edit options
 @Wadb options reset@w - reset options to defaults.
 @Wadb options set format.full flags false@w - don't show flags in format.full
 @Wadb options set cockpit show_db_updates false@w - don't show DB update messages
 @Wadb options set auto_actions on_normal_looted_cmd put %item bag@w -
   Executes "put %item bag" command for all non-bloot items looted from corpses.
   @W%item@w will be replaced with looted item id.
         Default options are explicitly conflicting, lua script will drop low cost
         items and then "_cmd" will try to put this dropped item in *my* bag.
         You can either modify the lua part to drop item in "else" clause or just
         clear it if you don't care.
 @Wadb options set auto_actions on_normal_looted_cmd@w - clear this action

@Ccockpit@W options@w
 Those could be set via @Wadb options edit@w or @Wadb options set cockpit <options> <value>@w:

 @Wenable_auto_actions <true|false>@w - enables or disables auto actions.
   Those actions from @Cauto_actions@w group are executed when you loot an item.
   @mon_normal_looted_lua@w - lua script, executed when you loot normal - not bloot item.
   @mon_normal_looted_cmd@w - regular command, it's sent to "Execute" so you can use
                          aliases here.

   For "normal" looted items you can use all of the item fields prefixed with % symbol
   to get actual values for the given item. Those pretty much are the same as listed
   in @G"dinv help query"@w. With an exception of @Gid@w field which is replaced by @G%item@w.
   TODO: list fields
   There are few special fields available:
   @G%item@w - looted item ID.
   @G%bloot@w - bloot level of the item, 0 for "normal" loot.
   @G%gpp@w - item's gold per pound value, worth/weight (checked for division by 0).
   @G%colorName@w - item's color name

   @mon_bloot_looted_lua@w and @mon_bloot_looted_cmd@w are the same as normal actions,
   but are only executed for bonus loot items. In other words %bloot is bigger than 0.
   @RNote@R: bonus loot items aren't automatically identified. Instead you will get
   most field values from it's "base" counterpart if that's found in the DB. Except for
   %item, %name, %colorName and %bloot which correspond to the actually looted item.
   Note: @RBloot actions with not be executed if base items isn't found in DB.@w

   I'm trying to decide if this usable or should there be an options to actually
   identify bloot items as well.

 @Wshow_bloot_level <true|false>@w - show/hide bloot level next to bloot names in game.
   If enabled changes your game output to look like this:
     @R(K)@B(M)@W(G)@C(H) @G(@WShimmering 8@G)@w @yM@Yon@ykey @wB@Wo@wne @W(@G154@W)
     @R(K)@B(M)@W(G)@C(H) @G(@WPolished 1@G)@w @RBi@Gol@Bum@Yin@Ces@Mce@Wnc@Re!@w @W(@G150@W)
     @R(K)@B(M)@W(G)@C(H) @R(@WRadiant <11>@R)@w a pair of icy boots @W(@G198@W)
     @R(K)@B(M)@W(G)@C(H) @G(@WEnhanced 2@G)@w @YE@ylvish @YR@yobes @Yo@yf @YP@yriesthood@w @W(@G153@W)@w

 @Widentify_command@w - command to use for item identification. Default's to "id",
   @rNot implemented@w

 @Wupdate_db_on_loot <true|false>@w   - update DB with looted items.

 @Wshow_db_updates <true|false>@w     - show/hide information when new items are adeed to DB.

 @Wshow_db_cache_hits <true|false>@w  - show/hide DB cache hit messages.

 @Wcache_added_format <format.name>@w - item ID output format used to display new items.

 @Widentify_format@w - default "aid" output format when channel is not specifief.

 @Widentify_channel_format@w - default "aid" output format when sending to a channel.
   TODO: more details on format, add format add/remove commands.
   For now you can check options under "format.brief" and "format.full"

 @Wdb_find_format <format.name>@w - default "adb find" output format.

@Wadb format add format.<newname> [<existing name>]@w - adds new output format with specified <new name>
  and copies settings from existing format. After adding a format you can change it's settings
  via @Wadb options set <format.newname> <setting> <value>@w
  or @Wadb format edit@w command.
  For example: adb format add format.mine

@Wadb format remove [<existing name>]@w - remove existing output format
  For example: adb format remove
               adn format remove format.mine

@Wadb format edit [<existing name>]@w - edit existing format
  For example: adb format edit

@Wadb info@w - show plugin information.

@Wadb find <query> [format.name]@w - search db using provided <query>.
  The query should be formed following sqlite3 select rules.
  Some examples:
     adb find type='Weapon' and level>25 and level<30 ORDER BY avedam desc, level asc
     adb find dam+hit>=50 format.full

  To get list of fields available use "dinv help query" for now. It's almost the same.
  TODO: list fields available
  TODO: split help into topics and give more details here.

@Wadb [off|on]@w - disable or enable auto actions.
  It's the same as typing longer command:
  @Wasb options set cockpit enable_auto_actions [false|true]@w

TODO: move changelog to separate entry
@MChangelog@w:
  1.003
  Added @Wadb format add/remove/edit
  Added @Wadb options edit
  1.004
  Don't update db when looting your own corpse.
  Fix 0 weight items check.
  Fix loot trigger for corpses without adjectives.
  1.005
  Fix for loot from from double adjective corpses.
  Process items if mob was one-shotted.
  1.006
  Added sqlite db under cache (check cockpit.max_cache_size option)
  Fix for loot lines not starting with color codes.
  1.007
  Fix for clan items which don't have clan instead of foundat field.
  Added extra debug command
  Added colorName field to action commands
  Fix db update on cache sync
  1.008
  Bunch of internal debugging changes.
  Added support to track loot from 'torso'.
  1.009
  Added items Skill Mods support.
  Bumped DB version to 2
  Added format options to output DB id, in-game item ID, Skill Mods, Comments, Keywords
  Added format.db and default db_find_format options.
  Added adb info command
  1.010
  Added adb find command
  Fix for reading Skill Mods from DB.
  Set default debug level to 0.
  1.011
  Change bloot actions to use name and colorName of the actually looted item.
  Minor fix to identify version updates which was forgotten sometimes.
  String are passed to lua auto actions without surrounding quotes now.
 @R---------------------------------------------------------------------------------
]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^{invmon}(?<action>\d+)\,(?<id>\d+)\,.+\,.+$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="adbOnInvmonTrigger"
   name="adbInvmonTrigger"
   omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^{invitem}(?<id>\d+),(.*?),(?<item>.*),(.*?),(.*?),(.*?),(.*?),(.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
   name="adbInvitemTrigger"
   group="adbLootTriggerGroup"
   omit_from_output="y"
   script="adbOnInvitemTrigger"
  >
  </trigger>

  <!-- Unfortunately mush client only gives style runs for the last line of multiline trigger. -->
  <!-- We want to properly capture colored item name to search it in the cash, so have to make 2 similar triggers. -->
  <!-- Making sure that multiline crumble trigger fires after the item looted trigger. -->
  <trigger
   enabled="n"
   match="^You get (?:(?<gold>[0-9,]+) gold coins?|(?:(?<count>\d+) \* )?(?<item>.*)) from the(?:[ \w]+)?(?:[ \w]+)? (?:corpse|torso) of (?<mob>.*)\.$"
   regexp="y"
   send_to="12"
   sequence="10"
   keep_evaluating="y"
   group="adbLootTriggerGroup"
   script="adbOnItemLootedTrigger"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^You get (?<item>.*) from the(?: \w+)?(?: \w+)? (?:corpse|torso) of (?<mob>.*)\.\n(?i)\1(?-i) crumbles into (?<crumble>[0-9,]+) gold pieces?.\n\Z"
   regexp="y"
   send_to="12"
   sequence="100"
   keep_evaluating="y"
   lines_to_match="2"
   multi_line="y"
   group="adbLootTriggerGroup"
   script="adbOnItemLootedCrumblesTrigger"
  >
  </trigger>

  <trigger
   enabled="n"
   name="adbBlootNameTrigger"
   match="^(?!\| Name       \:)(?!{invitem}).*\((?<bloot>Polished|Enhanced|Burnished|Shiny|Vibrant|Sparkling|Gleaming|Shimmering|Dazzling|Brilliant|Radiant|Wondrous|Majestic|Exalted|Eternal|Legendary|Epic|Mythical|Fabled|Divine|Godly)\).*$"
   regexp="y"
   send_to="12"
   sequence="100"
   keep_evaluating="y"
   omit_from_output="y"
   script="adbOnBlootNameTrigger"
  >
  </trigger>
</triggers>

<aliases>
  <alias
   script="adbOnIdentifyCommand"
   match="^aid (?<id>[^\s]+)(?<worn> worn)?(?: (?<channel>(?!format\.).+?))?(?: (?<format>format\..+))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnAdbDebugDump"
   match="^adb_debug_dump$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnAdbDebugCacheClear"
   match="^adb_debug_cache_clear$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnDebugLevel"
   match="^adb_debug_level (?<level>\d+)$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbDrainStacks"
   match="^adb_debug_drain$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnHelp"
   match="^adb help$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnOptionsCommand"
   match="^adb options(?: set (?<key1>[^\s]+) (?<key2>[^\s]+)(?: (?<value>.*))?)?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnOptionsResetCommand"
   match="^adb options reset$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="adbOnOptionsEditCommand"
   match="^adb options edit$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   match="^adb off$"
   regexp="y"
   enabled="y"
   send_to="10"
   sequence="100"
  >
  <send>adb options set cockpit enable_auto_actions false</send>
  </alias>
  <alias
   match="^adb on$"
   regexp="y"
   enabled="y"
   send_to="10"
   sequence="100"
  >
  <send>adb options set cockpit enable_auto_actions true</send>
  </alias>

  <alias
   script="adbOnFormatAdd"
   match="^adb format add (?<newname>format\..+)(?: (?<format>format\..+))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>

  <alias
   script="adbOnFormatRemove"
   match="^adb format remove(?: (?<format>format\..+))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>

  <alias
   script="adbOnFormatEdit"
   match="^adb format edit(?: (?<format>format\..+))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>

  <alias
   script="adbOnAdbInfo"
   match="^adb info$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>

  <alias
   script="adbOnAdbFind"
   match="^adb find (?<query>.+?)(?: (?<format>format\..+))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
dofile(GetPluginInfo(GetPluginID(), 20).."adb.lua")
]]>
</script>

</muclient>
